In Book Controller, set upload folder
Must setup postgresql with corresponding relations
No registration feature in this app, so add a row to the users table in order to login


Clicking on home link should invariably bring you to the login page for example if you've already logged in

BR-5: The Fan Outreach Service may be used by future applications, and will be a standalone service.
BR-6: The Fan Outreach Service will allow the creation of message-posting channels, subscription to those channels, and the sending/retrieval of messages therein
BR-7: A published author is always a published author, and their channels should not be removable.
FR-3: The Fan Outreach Service will use REST to handle interaction with other systems.
FR-3.1: POST to ".../service/{authorName}" will create an author channel
FR-3.2: PUT to ".../service/{authorName}" will add a subscriber to the author channel
FR-3.3: DELETE to ".../service/{authorName}" will remove a subscriber from the author channel
FR-3.4: GET to ".../service/{authorName}/messages" will retrieve all messages in the author channel
FR-3.5: POST to ".../service/{authorName}/messages" will send a message to the author channel
NFR-3: Each message will be a String
NFR-4: Subscribers will be identified by their username

BR-1: Users should have individual accounts, used to track and manage their activity.
BR-2: Users should not be able to use the application without logging in first
FR-1: Users must be able to access the application by logging into their account with a username and password.
Additionally, remember to implement these Nonfunctional Requirements:

NFR-1: usernames must be at least 8 characters long, and unique
NFR-2: Passwords must be at least 8 characters long, and include 2 numbers
The login system should consist of:

A users table that has, at minimum, columns for usernames and passwords.
A UserDAO class responsible for CRUD operations on the users table
A login.jsp page, with a form for username and password that submits with a POST request.
A LoginServlet class that accesses the UserDAO to check the provided username and password
A registration.jsp page, with a form for creating a new user account.
A RegistrationServlet class that accesses the UserDAO to create a new user in the database
The login.jsp should be the first page the user sees.





manage your subscriptions  || authors you are subscribed to -> post to channel  -> add subscription


NEED TO MAKE SUBSCRIBERS SUBSCRIPTIONS UNIQUE, RIGHT NOW YOU CAN SUBSCRIBE TO THE SAME PERSON OVER AND OVER AND IT MAKES NEW ROWS IN DB



BR-4: Users should be able to view an Author's info page, and subscribe messages from them.
FR-4: The Fan Outreach Service will register an author channel for an author when he or she publishes their first book.
NFR-4: The application should use Servlets for all user navigation within the web application
FR-5: The user's session should be maintained as they navigate through the entire application.
As a bare minimum, you should implement the following new functionality:

create ViewAuthorDetailsServlet
create SendMessageServlet
create ViewMessageDetailsServlet
create ViewMessageListServlet
create AddSubscriptionSerlet
create RemoveSubscriptionServlet
change PublishBookServlet to create an author channel if the user has not published before, and to change the user's role to AUTHOR
Note that many of these servlets will act as clients for the service you have created, connecting, sending an HTTP request, and parsing the response.

NFR-5: The application should use JSPs for the views presented to the user
At a minimum, you should be able to do the following:

create sendMessage.jsp
create messageDetails.jsp
create messageList.jsp
create authorDetails.jsp



NEED A CHECK AT SOCIALHOME SO THAT WHEN BUTTON IS PRESSED FOR AUTHORS, THAT MAPPING CHECKS IF THE SECUIRTY CONTEXT USER HAS THE CORRECT ROLE, IF SO, GO TO SEND MESSAGE
IF NOT GO TO PAGE THAT SAYS "YOU ARE NOT AN AUTHOR"

SENDMESSAGE JSP SHOULD THEN, FROM MESSAGE CONTROLLER /MESSAGE/SEND, GET THE MODEL ATTRIBUTE LIKE--IT GETS THE 
SECURITY USER CONTEXT HOLDER WHICH IS A USER THAT HAS THE COLLECTION OF CHANNELS FROM THERE YOU GET THE CHANNEL
MAPPED TO THAT USER(AUTHOR), WHICH HAS THE COLLECTION OF USERS (SUBSCRIBEES)